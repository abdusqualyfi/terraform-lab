# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  resourcegroup: "tf-lab"
  storageacc: "abdusterrastore"
  stcontainer: "landing"
  storagekey: "devpipeline.terraform.tfstate"

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/_terraform-lab'
              backendServiceArm: 'Abdus Terraform Serv Conn'
              backendAzureRmResourceGroupName: 'tf-lab'
              backendAzureRmStorageAccountName: 'abdusterrastore'
              backendAzureRmContainerName: 'landing'
              backendAzureRmKey: 'devpipeline.terraform.tfstate'
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/_terraform-lab'
              environmentServiceNameAzureRM: 'Abdus Terraform Serv Conn'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/_terraform-lab'
              environmentServiceNameAzureRM: 'Abdus Terraform Serv Conn'